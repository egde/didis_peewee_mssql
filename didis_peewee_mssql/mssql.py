from peewee import Database
import pyodbc
from loguru import logger
import re

class MSSQLServer(Database):

    field_types = {
        'AUTO': 'INTEGER IDENTITY(1,1)',
        'INT GENERATED BY DEFAULT AS IDENTITY': 'INTEGER IDENTITY(1,1)',
        'BLOB': 'VARBINARY(MAX)'
        }
    
    def init(self, database, **kwargs) -> None:
        logger.info('''
            _    _            _        _____  _     _ _ _       _____                              __  __  _____ _____  ____  _      
            | |  | |          | |      |  __ \(_)   | (_| )     |  __ \                            |  \/  |/ ____/ ____|/ __ \| |     
            | |  | |_ __   ___| | ___  | |  | |_  __| |_|/ ___  | |__) |__  _____      _____  ___  | \  / | (___| (___ | |  | | |     
            | |  | | '_ \ / __| |/ _ \ | |  | | |/ _` | | / __| |  ___/ _ \/ _ \ \ /\ / / _ \/ _ \ | |\/| |\___ \\___ \| |  | | |     
            | |__| | | | | (__| |  __/ | |__| | | (_| | | \__ \ | |  |  __/  __/\ V  V /  __/  __/ | |  | |____) |___) | |__| | |____ 
            \____/|_| |_|\___|_|\___| |_____/|_|\__,_|_| |___/ |_|   \___|\___| \_/\_/ \___|\___| |_|  |_|_____/_____/ \___\_\______|
         
                    ''')
        return super().init(database, **kwargs)
    
    def _connect(self):
        driver = self.connect_params.get('driver') if self.connect_params.get('driver') is not None else '{ODBC Driver 18 for SQL Server}'
        server = self.connect_params.get('host')
        username = self.connect_params.get('user')
        password = self.connect_params.get('password')
        database = self.database
        trustserverauthentication = self.connect_params.get('trustservercertificate') if self.connect_params.get('trustservercertificate') is not None else 'no'
        authentication = self.connect_params.get('authentication') if self.connect_params.get('authentication') is not None else 'SqlPassword'
        connection_string = f'''
            Driver={driver};
            Server={server};
            Database={database};
            UID={username};
            PWD={password};
            trustservercertificate={trustserverauthentication};
            authentication={authentication}'''
        connection  = pyodbc.connect(connection_string, autocommit=True)
        return connection
    
    def get_tables(self, schema=None):
        if schema:
            query = '''
                SELECT 
                    TABLE_NAME 
                FROM 
                    INFORMATION_SCHEMA.TABLES 
                WHERE 
                    TABLE_SCHEMA = ? AND TABLE_TYPE = ? 
                ORDER BY 
                    TABLE_NAME'''
            cursor = self.execute_sql(sql=query, 
                                      params=(schema, 'BASE TABLE',))
        else:
            query = '''
                SELECT 
                    TABLE_NAME 
                FROM 
                    INFORMATION_SCHEMA.TABLES 
                WHERE
                     TABLE_TYPE = ? 
                ORDER BY 
                    TABLE_NAME'''

            cursor = self.execute_sql(sql=query, 
                                      params=('BASE TABLE',))

        return [r[0] for r in cursor.fetchall()]
    
    def _sql_rewrite_create_table(self, sql: str) -> str:
        string_to_be_replaced = 'CREATE TABLE IF NOT EXISTS'
        if sql.startswith(string_to_be_replaced):
            pattern = r'CREATE TABLE IF NOT EXISTS ("(.*?)".)?"(.*?)"'
            schema_name = re.search(pattern=pattern, string=sql).group(2)
            schema_name = schema_name if schema_name is not None else 'dbo'
            table_name = re.search(pattern=pattern, string=sql).group(3)

            replacement = f'''IF OBJECT_ID(N'{schema_name}.{table_name}', N'U') IS NULL
            CREATE TABLE '''
            return sql.replace(string_to_be_replaced, replacement)
        return sql
    
    def _sql_rewrite_create_index(self, sql: str) -> str:
        string_to_be_replaced = 'CREATE INDEX IF NOT EXISTS'
        if sql.startswith(string_to_be_replaced):
            pattern_index_name = r'CREATE INDEX IF NOT EXISTS "(.*?)"'
            index_name = re.search(pattern=pattern_index_name, string=sql).group(1)

            pattern_table_name = r'ON ("(.*?)".)?"(.*?)"'
            schema_name = re.search(pattern=pattern_table_name, string=sql).group(2)
            schema_name = schema_name if schema_name is not None else 'dbo'
            table_name = re.search(pattern=pattern_table_name, string=sql).group(3)

            replacement = f'''IF NOT EXISTS (SELECT * FROM SYSINDEXES WHERE id=OBJECT_ID('{schema_name}.{table_name}') and name='{index_name}') 
            CREATE INDEX '''
            return sql.replace(string_to_be_replaced, replacement)
        return sql
    
    def _sql_rewrite_create_unique_index(self, sql: str) -> str:
        string_to_be_replaced = 'CREATE UNIQUE INDEX IF NOT EXISTS'
        if sql.startswith(string_to_be_replaced):
            pattern_index_name = r'CREATE UNIQUE INDEX IF NOT EXISTS "(.*?)"'
            index_name = re.search(pattern=pattern_index_name, string=sql).group(1)

            pattern_table_name = r'ON ("(.*?)".)?"(.*?)"'
            schema_name = re.search(pattern=pattern_table_name, string=sql).group(2)
            schema_name = schema_name if schema_name is not None else 'dbo'
            table_name = re.search(pattern=pattern_table_name, string=sql).group(3)

            replacement = f'''IF NOT EXISTS (SELECT * FROM SYSINDEXES WHERE id=OBJECT_ID('{schema_name}.{table_name}') and name='{index_name}') 
            CREATE UNIQUE INDEX '''
            return sql.replace(string_to_be_replaced, replacement)
        return sql

    def execute_sql(self, sql, params = ..., commit=...):
        sql = self._sql_rewrite_create_table(sql)
        sql = self._sql_rewrite_create_index(sql)
        sql = self._sql_rewrite_create_unique_index(sql)
        logger.debug(f'''execute_sql - SQL: 
                            {sql}

                        Params: 
                            {params}''')
        return super().execute_sql(sql, params, commit)
    
    def get_binary_type(self):
        return bytes